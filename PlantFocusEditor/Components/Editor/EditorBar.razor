@inject IJSRuntime JS

<section class="editor-bar">
    <div class="undo-redo">
        <button @onclick="Undo" disabled="@(!_undoPossible)">
            @((MarkupString)CustomIcons.Undo())
        </button>
        <button @onclick="Redo" disabled="@(!_redoPossible)">
            @((MarkupString)CustomIcons.Redo())
        </button>
    </div>
    <div class="switch-sides">
        <button @onclick="SwitchSides">
            @(_isFront ? "Front" : "Back")
            @((MarkupString)CustomIcons.Rotate())
        </button>
    </div>
    <div class="flip">
        <button @onclick="Flip">
            @((MarkupString)CustomIcons.Flip())
        </button>
    </div>

</section>

@code {
    [Parameter]
    public Action EditorClicked { get; set; }

    private IJSObjectReference? _module;
    private bool _isFront = true;
    private bool _undoPossible = false;
    private bool _redoPossible = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/stateControls.js");
            await getUndoRedoStates();
        }
    }

    public async Task getUndoRedoStates()
    {
        if (_module != null)
        {
            Dictionary<string, JsonElement> values = await _module.InvokeAsync<Dictionary<string, JsonElement>>("getValues");
            _undoPossible = values["undoPossible"].GetBoolean();
            _redoPossible = values["redoPossible"].GetBoolean();
            StateHasChanged();
            EditorClicked();
        }
    }

    private async Task SwitchSides()
    {
        if (_module != null)
        {
            await _module.InvokeVoidAsync("switchSides");
            _isFront = !_isFront;
            await getUndoRedoStates();
            EditorClicked();
        }
    }

    private void Flip()
    {
        if (_module != null)
        {
            _module.InvokeVoidAsync("flip");
        }
    }

    private async Task Undo()
    {
        if (_module != null)
        {
            await _module.InvokeVoidAsync("undo");
            await getUndoRedoStates();
        }
    }

    private async Task Redo()
    {
        if (_module != null)
        {
            await _module.InvokeVoidAsync("redo");
            await getUndoRedoStates();
        }
    }
}
