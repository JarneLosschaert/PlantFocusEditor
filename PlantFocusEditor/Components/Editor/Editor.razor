@inject IJSRuntime JS;
@inject PDFConversionService PDFConversionService

<section class="editor">
    <EditorBar />
    <div id="konva-container" @onclick="OnKonvaClicked"></div>
    <button @onclick="Save">Save to pdf</button>
    <button @onclick="SaveToPdf">Save to pdf iText</button>
</section>

@code {
    [Parameter]
    public Action KonvaClicked { get; set; }

    private IJSObjectReference? _module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/saveToPdf.js");
            Console.WriteLine(Directory.Exists("js"));
        }
    }

    private void Save()
    {
        if (_module != null)
        {
            _module.InvokeVoidAsync("saveToPdfFromJson");
        }
    }

    public async Task SaveToPdf()
    {
        if (_module != null)
        {
            string jsonToRender = await _module.InvokeAsync<string>("getJsonToRender");
            float[] dimensions = await _module.InvokeAsync<float[]>("getDimensions");
            string fontsPath = await _module.InvokeAsync<string>("getFontsDirectory");
            byte[] pdfBytes = PDFConversionService.SaveToPdf(jsonToRender, dimensions, fontsPath);
            string timeStamp = DateTime.Now.ToString("yyyyMMddHHmmssffff");
            string fileName = $"{timeStamp}.pdf";
            string fileType = "application/pdf";
            await JS.InvokeVoidAsync("downloadFile", pdfBytes, fileName, fileType);
        }
    }

    private void OnKonvaClicked()
    {
        InvokeAsync(KonvaClicked);
    }
}
