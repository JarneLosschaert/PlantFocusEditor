@inject ApiConnectorService API
@inject TemplatesService TemplatesService
@inject IJSRuntime JS

<section class="templates-content">
    <ul>
        @foreach (KeyValuePair<int, string> preview in _previews)
        {
            <li>
                <img src="@preview.Value" id="@preview.Key" @onclick="@((e) => SelectTemplate(preview.Key))"/>
            </li>
        }
    </ul>
</section>

@code {

    private IJSObjectReference? _module;
    private IJSObjectReference? _moduleState;
    private List<Template> _templates = [];
    private Dictionary<int, string> _previews = new();

    protected override void OnInitialized()
    {
        _templates = TemplatesService.GetTemplates();
        _previews = TemplatesService.GetPreviews();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/renderPreview.js");
            _moduleState = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/state.js");
            if (_templates.Count() == 0 && _previews.Count() == 0)
            {
                _templates = await API.GetTemplatesAsync(null, null) ?? [];
                TemplatesService.SetTemplates(_templates);
                for (int i = 0; i < _templates.Count(); i++)
                {
                    Template template = _templates[i];
                    string source = await _module.InvokeAsync<string>("renderPreviewFromJson", template.JsonToRender);
                    if (source != "")
                    {
                        _previews.Add(template.ID, source);
                        if (_previews.Count() == 1)
                        {
                            await _moduleState.InvokeVoidAsync("loadStateFromTemplate", template.JsonToRender);
                        }
                    }
                }
                TemplatesService.SetPreviews(_previews);
                StateHasChanged();
            }
        }
    }

    private async void SelectTemplate(int id)
    {
        Template template = _templates.Find(el => el.ID == id);
        if (_moduleState is not null && template is not null)
        {
            await _moduleState.InvokeVoidAsync("loadStateFromTemplate", template.JsonToRender);
        }
    }
}
