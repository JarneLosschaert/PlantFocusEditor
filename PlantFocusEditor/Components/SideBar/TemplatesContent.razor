@inject ApiConnectorService API
@inject IJSRuntime JS

<section class="templates-content">
    <ul>
        @foreach (KeyValuePair<int, string> preview in _previews)
        {
            <li>
                <img src="@preview.Value" id="@preview.Key" @onclick="@((e) => SelectTemplate(preview.Key))"/>
            </li>
        }
    </ul>
</section>

@code {
    private IJSObjectReference? _module;
    private IJSObjectReference? _moduleState;
    private List<Template> _templates = [];
    private Dictionary<int, string> _previews = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _templates = await API.GetTemplatesAsync(null, null) ?? [];
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/renderPreview.js");
            _moduleState = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/state.js");
            foreach (Template template in _templates)
            {
                if (_module is not null)
                {
                    string source = await _module.InvokeAsync<string>("renderPreviewFromJson", template.JsonToRender);
                    if (source != "")
                    {
                        _previews.Add(template.ID, source);
                    }
                }
            }
            StateHasChanged();
        }
    }

    private async void SelectTemplate(int id)
    {
        Template template = _templates.Find(el => el.ID == id);
        if (_moduleState is not null && template is not null)
        {
            await _moduleState.InvokeVoidAsync("loadStateFromTemplate", template.JsonToRender);
        }
    }
}
