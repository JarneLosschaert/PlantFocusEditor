@inject IJSRuntime JS;

<article class="elements-content">
    <div class="elements-header">
        <h3 @onclick="() => _shapesSelected = true" class="@(_shapesSelected ? "selected" : "")">Shapes</h3>
        <h3 @onclick="() => _shapesSelected = false" class="@(!_shapesSelected ? "selected" : "")">Icons</h3>
    </div>
    <div class="elements-list">
        <ul>
            @if (_shapesSelected)
            {
                <li>
                    <img src="../../images/rectangle.png" alt="shape" @onclick="AddRectangle" />
                </li>
                <li>
                    <img src="../../images/circle.png" alt="shape" @onclick="AddCircle" />
                </li>
                <li>
                    <img src="../../images/triangle.png" alt="shape" @onclick="AddTriangle" />
                </li>
            }
            else
            {
                @for (int i = 0; i < 19; i++)
                {
                    <li>
                        <img src="../../sample-data/icon.png" alt="icon" />
                    </li>
                }
            }
        </ul>
    </div>
</article>

@code {
    private IJSObjectReference? _module;
    private bool _shapesSelected = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/layers/elementLayer.js");
        }
    }

    private void AddRectangle()
    {
        _module?.InvokeVoidAsync("addRectangle");
    }

    private void AddCircle()
    {
        _module?.InvokeVoidAsync("addCircle");
    }

    private void AddTriangle()
    {
        _module?.InvokeVoidAsync("addTriangle");
    }
}
