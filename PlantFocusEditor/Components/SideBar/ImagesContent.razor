@inject ImagesService ImagesService
@inject IJSRuntime JS

<article class="images-content">
    <div class="input-file-container">
        <label for="add-image">
            <span>Choose your own image</span>
            <span>Supports: PNG & JPG</span>
        </label>
        <InputFile id="add-image" OnChange="OnInputFileChange"></InputFile>
    </div>
    <di class="images-container">
        @if (_images.Count > 0)
        {
            <ul>
                @foreach (var image in _images)
                {
                    <li>
                        <img src="@image" alt="image" @onclick="() => AddImage(image)" />
                    </li>
                }
            </ul>
        }
    </di>
</article>

@code {
    private IJSObjectReference? _module;
    private List<string> _images = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/layers/imageLayer.js");
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _images = ImagesService.GetImages();
        if (_images.Count == 0)
        {
            ImagesService.AddImage("https://www.w3schools.com/w3images/paris.jpg");
            ImagesService.AddImage("https://www.w3schools.com/w3images/mountains.jpg");
            ImagesService.AddImage("https://www.w3schools.com/w3images/lights.jpg");
            ImagesService.AddImage("https://www.w3schools.com/w3images/nature.jpg");
            ImagesService.AddImage("https://www.w3schools.com/w3images/snow.jpg");
            ImagesService.AddImage("https://www.w3schools.com/w3images/forest.jpg");
            ImagesService.AddImage("https://www.w3schools.com/w3images/rocks.jpg");
            ImagesService.AddImage("https://www.w3schools.com/w3images/nature.jpg");
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            if (file.Size > 1 * 1024 * 1024)
            {
                await JS.InvokeVoidAsync("alert", "The selected image is too big. Please select an image smaller than 1MB.");
                continue;
            }

            if (!file.ContentType.Contains("image/png") && !file.ContentType.Contains("image/jpeg"))
            {
                await JS.InvokeVoidAsync("alert", "The selected file type is not supported. Please select a PNG or JPG image.");
                continue;
            }

            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            var imageData = Convert.ToBase64String(buffer);
            var src = $"data:{file.ContentType};base64,{imageData}";
            ImagesService.AddImage(src);
        }
    }


    public void AddImage(string src)
    {
        _module?.InvokeVoidAsync("addImage", src);
    }
}