@inject ImagesService ImagesService
@inject IJSRuntime JS

<article class="images-content">
    <div class="input-file-container">
        <label for="add-image">
            <span>Choose your own image here</span>
            <span>Supports: PNG & JPG</span>
        </label>
        <InputFile id="add-image" OnChange="OnInputFileChange"></InputFile>
    </div>
    <di class="images-container">
        @if (_images.Count > 0)
        {
            <ul>
                @foreach (KeyValuePair<string, string> image in _images)
                {
                    <li>
                        <img src="@image.Value" id="@image.Key" alt="img" @onclick="@(() => SelectImageFromList(image.Key, image.Value))" />
                    </li>
                }
            </ul>
        }
    </di>
</article>



@code {
    [Parameter]
    public EventCallback OnRendered { get; set; }

    private IJSObjectReference? _module;
    private Dictionary<string, string> _images = new Dictionary<string, string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/layers/imageLayer.js");
            await OnRendered.InvokeAsync();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _images = ImagesService.GetImages();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {

        foreach (var file in e.GetMultipleFiles())
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            var imageData = Convert.ToBase64String(buffer);
            var src = $"data:{file.ContentType};base64,{imageData}";
            var id = Guid.NewGuid().ToString();
            ImagesService.AddImage(id, src);
            if (_module != null)
            {
                await _module.InvokeVoidAsync("addImage", id, src);
            }
        }
    }

    public void AddImage(string id, string src)
    {
        ImagesService.AddImage(id, src);
        StateHasChanged();
    }

    public void SelectImageFromList(string id, string src)
    {
        _module?.InvokeVoidAsync("addImage", id, src);
    }
}
