@inject IJSRuntime JS;

<article class="codes-content">
    <form @onsubmit="GenerateBarcode">
        <h3>Barcode</h3>
        <input type="number" id="barcodeInput" @bind="_barcode" />
        <button type="submit">Generate barcode</button>
    </form>
    <form @onsubmit="GenerateBarcode">
        <h3>QR code</h3>
        <input type="text" id="qrcodeInput" @bind="_qrcode"/>
        <button type="submit">Generate QR code</button>
    </form>
</article>

@code {
    private IJSObjectReference? _module;

    private string _barcode = "";
    private string _qrcode = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/layers/codeLayer.js");
            StateHasChanged();
        }
    }

    public void GenerateBarcode()
    {
        _module.InvokeVoidAsync("addBarcode", _barcode);
    }

    private void GenerateQrCode()
    {
        QRCodeGenerator generator = new QRCodeGenerator();
        QRCodeData codeData = generator.CreateQrCode(_qrcode, QRCodeGenerator.ECCLevel.Q);
        PngByteQRCode qrCode = new PngByteQRCode(codeData);
        byte[] qrCodeByteArr = qrCode.GetGraphic(20);
        string base64String = Convert.ToBase64String(qrCodeByteArr);
        string source = $"data:image/png;base64,{base64String}";
        _module.InvokeVoidAsync("addQRCode", source, _qrcode);
    }
}
