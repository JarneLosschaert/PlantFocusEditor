@inject TemplatesService TemplatesService
@inject ApiConnectorService API
@inject IJSRuntime JS

<CascadingValue Value="this">
    <div class="label-editor">
        <SideBar SelectTab="SelectTab" />
        <SideBarContent @ref="_sideBarContent" />
        <Editor EditorClicked="HandleEditorClicked" />
        <StylingBar @ref="_stylingBar" />
    </div>
</CascadingValue>

@code {
    public SideBarTabs _SelectedTab { get; set; } = SideBarTabs.Layers;
    private IJSObjectReference? _module;
    private StylingBar.StylingBar? _stylingBar;
    private SideBarContent? _sideBarContent;

    public void SelectTab(SideBarTabs tab)
    {
        _SelectedTab = tab;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/state.js");
            if (_module is not null)
            {
                await _module.InvokeVoidAsync("init");
                await LoadTemplate();
            }
        }
    }

    private async Task LoadTemplate()
    {
        object state = await JS.InvokeAsync<object>("localStorage.getItem", "state");
        if (state is null)
        {
            List<Template> templates = await API.GetTemplatesAsync(null, null) ?? new List<Template>();
            if (templates.Count() > 0)
            {
                Template template = templates[14];
                if (_module is not null)
                {
                    await _module.InvokeVoidAsync("loadTemplate", template.JsonToRender);
                }
            }
        }
        else
        {
            if (_module is not null)
            {
                await _module.InvokeVoidAsync("loadTemplate", state);
            }
        }
        _loading = false;
        _sideBarContent?.onEditorClicked();
    }

    public void HandleEditorClicked()
    {
        _stylingBar?.SetSelectedItem();
        _sideBarContent?.onEditorClicked();
    }
}
