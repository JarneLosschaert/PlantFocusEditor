@inject IJSRuntime JS

<article class="appearance-content">
    <h3>Appearance</h3>
    <div>
        <div>
            <h4>Opacity</h4>
            <Slider value="@_opacity"
                    unit="%"
                    handleValue="@changeOpacity" />
        </div>
        <div>
            <h4>Shadow</h4>
            <Slider value="@_shadow"
                    unit="%"
                    handleValue="@changeShadow" />
        </div>
    </div>
</article>

@code {
    [Parameter]
    public IJSObjectReference? Module { get; set; }

    private int _opacity = 100;
    private int _shadow = 0;

    protected override async Task OnParametersSetAsync()
    {
        if (Module != null)
        {
            Dictionary<string, JsonElement> values = await Module.InvokeAsync<Dictionary<string, JsonElement>>("getValues");
            _opacity = (int) Math.Round(values["opacity"].GetDouble() * 100);
            _shadow = (int) Math.Round(values["shadow"].GetDouble() * 100);
            StateHasChanged();
        }
    }

    private void changeOpacity(int value)
    {
        _opacity = value;
        double newOpacity = _opacity / 100.0;
        if (Module != null)
        {
            Module.InvokeVoidAsync("handleTransparencyChange", newOpacity);
        }
    }

    private void changeShadow(int value)
    {
        _shadow = value;
        double newShadow = _shadow / 100.0;
        if (Module != null)
        {
            Module.InvokeVoidAsync("handleShadowChange", newShadow);
        }
    }
}

