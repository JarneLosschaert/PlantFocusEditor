@inject IJSRuntime JS

<article class="text-style-content">
    <h3>General</h3>
    <div>
        <div>
            <h4>Font</h4>
            <div>
                <select @bind="_selectedFont" @oninput="ChangeFont">
                    <option>Arial</option>
                    <option>Times New Roman</option>
                    <option>Verdana</option>
                    <option>Georgia</option>
                    <option>Comic Sans MS</option>
                </select>
                <div class="icon">
                    @((MarkupString)CustomIcons.ChevronDown())
                </div>
            </div>

        </div>
        <div>
            <h4>Style</h4>
            <div>
                <button class="@(_isBold ? "selected" : "")" @onclick="ToggleBold">@((MarkupString)CustomIcons.Bold())</button>
                <button class="@(_isItalic ? "selected" : "")" @onclick="ToggleItalic">@((MarkupString)CustomIcons.Italic())</button>
                <button class="@(_isUnderline ? "selected" : "")" @onclick="ToggleUnderline">@((MarkupString)CustomIcons.Underline())</button>
            </div>
        </div>
        <div>
            <h4>Size</h4>
            <div class="size-input">
                <input type="number" @bind="_fontSize" @oninput="ChangeFontSize"/>
                <div>
                    <p>pt</p>
                    <div class="dropdown">
                        <button @onclick="ToggleSizePopup">
                            @if (_isSizePopupVisible)
                            {
                                @((MarkupString)CustomIcons.ChevronUp())
                            }
                            else
                            {
                                @((MarkupString)CustomIcons.ChevronDown())
                            }
                        </button>
                        @if (_isSizePopupVisible)
                        {
                            <ul>
                                @foreach (var size in _sizeList)
                                {
                                    <li @onclick="() => _fontSize = int.Parse(size)">@size pt</li>
                                }
                            </ul>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div>
            <h4>Color</h4>
            <ColorInput fontColor="@_fontColor"
                        handleColor="@ChangeColor" />
        </div>
        <div>
            <h4>Align</h4>
            <div class="align-input">
                <button class="@(_align == "left" ? "selected" : "")" @onclick="SetAlignLeft">@((MarkupString)CustomIcons.AlignLeft())</button>
                <button class="@(_align == "center" ? "selected" : "")" @onclick="SetAlignCenter">@((MarkupString)CustomIcons.AlignCenter())</button>
                <button class="@(_align == "right" ? "selected" : "")" @onclick="SetAlignRight">@((MarkupString)CustomIcons.AlignRight())</button>
            </div>
        </div>
    </div>
</article>

@code {
    private IJSObjectReference? _module;

    private List<string> _sizeList = new List<string> { "8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72" };

    private bool _isPositionPopupVisible = false;
    private bool _isSizePopupVisible = false;

    private string _selectedFont = "Arial";
    private bool _isBold = false;
    private bool _isItalic = false;
    private bool _isUnderline = false;
    private int _fontSize = 30;
    private string _align = "left";
    private string _fontColor = "#000000";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/textStylingBar.js");
            Dictionary<string, JsonElement> values = await _module.InvokeAsync<Dictionary<string, JsonElement>>("getValues");
            _selectedFont = values["font"].GetString() ?? "Arial";
            string? fontStyle = values["fontStyle"].GetString();
            string? textDecoration = values["textDecoration"].GetString();
            if (fontStyle != null)
            {
                _isBold = fontStyle.Contains("bold");
                _isItalic = fontStyle.Contains("italic");
            }
            if (textDecoration != null)
            {
                _isUnderline = textDecoration.Contains("underline");
            }
            _align = values["align"].GetString() ?? "center";
            _fontColor = values["color"].GetString() == "black" ? "#000000" : values["color"].GetString() ?? "#000000";
            _fontSize = values["fontSize"].GetInt16();
            StateHasChanged();
        }
    }

    private string GetFontStyle()
    {
        if (_isBold && _isItalic)
        {
            return "bold italic";
        }
        if (_isBold)
        {
            return "bold";
        }
        if (_isItalic)
        {
            return "italic";
        }
        return "normal";
    }

    private void TogglePositionPopup()
    {
        _isPositionPopupVisible = !_isPositionPopupVisible;
    }

    private void ToggleSizePopup()
    {
        _isSizePopupVisible = !_isSizePopupVisible;
    }

    private void ToggleBold()
    {
        _isBold = !_isBold;
        _module.InvokeVoidAsync("handleBoldItalic", GetFontStyle());

    }

    private void ToggleItalic()
    {
        _isItalic = !_isItalic;
        _module.InvokeVoidAsync("handleBoldItalic", GetFontStyle());
    }

    private void ToggleUnderline()
    {
        _isUnderline = !_isUnderline;
        if (_isUnderline)
        {
            _module.InvokeVoidAsync("handleUnderline", "underline");
        }
        else
        {
            _module.InvokeVoidAsync("handleUnderline", "normal");
        }
    }

    private void ChangeColor(string color)
    {
        _fontColor = color;
        _module.InvokeVoidAsync("handleFontColorChange", color);
    }

    private void SetAlignLeft()
    {
        _align = "left";
        _module.InvokeVoidAsync("handleAlignmentChange", "left");
    }

    private void SetAlignCenter()
    {
        _align = "center";
        _module.InvokeVoidAsync("handleAlignmentChange", "center");
    }

    private void SetAlignRight()
    {
        _align = "right";
        _module.InvokeVoidAsync("handleAlignmentChange", "right");
    }

    private void ChangeFontSize(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newFontSize))
        {
            _fontSize = newFontSize;
            _module.InvokeVoidAsync("handleFontSizeChange", newFontSize);
        }
    }

    private async Task ChangeFont(ChangeEventArgs e)
    {
        await _module.InvokeVoidAsync("handleFontSelect", e.Value.ToString());
    }
}
