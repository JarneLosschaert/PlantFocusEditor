@inject IJSRuntime JS;

@if (_differentNodes)
{
    <div></div>
}

@if (_visible)
{
    <ul id="control-bar">
        <li class="@(StylingBar._popupVisible == "layers" ? "visible" : "")">
            <button @onclick='() => StylingBar.togglePopup("layers")'>@((MarkupString)CustomIcons.Layers())</button>
            @if (StylingBar._popupVisible == "layers")
            {
                <div class="popup">
                    <ul>
                        <li>
                            <button @onclick="() => onPositionChangeClick(true, true)">
                                @((MarkupString)CustomIcons.Front())
                                <span>Bring to front</span>
                            </button>
                        </li>
                        <li>
                            <button @onclick="() => onPositionChangeClick(true, false)">
                                @((MarkupString)CustomIcons.Forward())
                                <span>Bring forward</span>
                            </button>
                        </li>
                        <li>
                            <button @onclick="() => onPositionChangeClick(false, false)">
                                @((MarkupString)CustomIcons.Backward())
                                <span>Send backward</span>
                            </button>
                        </li>

                        <li>
                            <button @onclick="() => onPositionChangeClick(false, true)">
                                @((MarkupString)CustomIcons.Back())
                                <span>Send to back</span>
                            </button>
                        </li>
                    </ul>
                </div>
            }
        </li>
        <li><button @onclick="onLockClick">@((MarkupString)(_locked ? CustomIcons.UnLocked() : CustomIcons.Locked()))</button></li>
        <li><button @onclick="onCloneClick">@((MarkupString)CustomIcons.Clone())</button></li>
        <li><button @onclick="onDeleteClick">@((MarkupString)CustomIcons.Trash())</button></li>
    </ul>
}

@code {
    private IJSObjectReference? module;

    [CascadingParameter]
    public StylingBar StylingBar { get; set; }

    private bool _visible = false;

    private bool _differentNodes = false;
    private bool _locked = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/controlBar.js");
            await module.InvokeVoidAsync("setControlBarReference", DotNetObjectReference.Create(this));
        }
    }

    private void onLockClick()
    {
        _locked = !_locked;
        module.InvokeVoidAsync("lockNode");
    }

    private void onCloneClick()
    {
        module.InvokeVoidAsync("cloneNode");
    }

    private void onDeleteClick()
    {
        module.InvokeVoidAsync("deleteNodes");
    }

    private void onPositionChangeClick(bool forward, bool full)
    {
        module.InvokeVoidAsync("changePosition", forward, full);
    }

    public void displayControlBar(bool visisble, bool differentNodes)
    {
        _visible = visisble;
        _differentNodes = differentNodes;
        StateHasChanged();
    }

    public void updateControlBarValues(bool locked)
    {
        if (_locked != locked)
        {
            StylingBar.togglePopup("");
        }
        _locked = locked;
        StateHasChanged();
    }
}
