@inject IJSRuntime JS

<article class="elements-content">
    <h3>Fill</h3>
    <div>
        <div>
            <h4>Color</h4>
            <ColorInput fontColor="@_fillColor1"
                        handleColor="@ChangeColor1" />
        </div>
        <div>
            <h4>Accent</h4>
            <ColorInput fontColor="@_fillColor2"
                        handleColor="@ChangeColor2" />
        </div>
        <div>
            <h4></h4>
            <Slider value="@_colorStop"
                    unit="%"
                    handleValue="@changeColorStop" />
        </div>
    </div>
</article>

@code {
    [Parameter]
    public IJSObjectReference? Module { get; set; }

    private string _fillColor1 = "#000000";
    private string _fillColor2 = "#000000";
    private int _colorStop = 50;

    protected override async Task OnParametersSetAsync()
    {
        Dictionary<string, JsonElement> values = await Module.InvokeAsync<Dictionary<string, JsonElement>>("getValues");
        _fillColor1 = values["fillColor1"].GetString();
        _fillColor2 = values["fillColor2"].GetString();
        _colorStop = values["colorStop"].GetInt16();
        StateHasChanged();
    }

    private void ChangeColor()
    {
        if (Module != null)
        {
            List<string> colors = new List<string> { _fillColor1, _fillColor2 };
            Module.InvokeVoidAsync("handleColorChange", colors);
        }
    }

    private void ChangeColor1(string color)
    {
        _fillColor1 = color;
        ChangeColor();

    }

    private void ChangeColor2(string color)
    {
        _fillColor2 = color;
        ChangeColor();
    }

    private void changeColorStop(int value)
    {
        _colorStop = value;
        if (Module != null)
        {
            Module.InvokeVoidAsync("handleColorStop", _colorStop);
        }
    }
}