@inject IJSRuntime JS;

<article class="code-style-content">
    <h3>Code</h3>
    <div>
        <div>
            <h4>Code</h4>
            @if (isBarcode)
            {
                <input type="number" id="codeInput" @bind="_code" @oninput="onCodeInput" />
            }
            else
            {
                <input type="text" id="codeInput" @bind="_code" @oninput="onCodeInput" />
            }
        </div>
    </div>
</article>

@code {

    [Parameter]
    public bool isBarcode { get; set; }

    [Parameter]
    public IJSObjectReference Module { get; set; }

    private string _code = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Dictionary<string, JsonElement> values = await Module.InvokeAsync<Dictionary<string, JsonElement>>("getValues");
            _code = values["code"].GetString() ?? "";
            StateHasChanged();
        }
    }

    private void onCodeInput(ChangeEventArgs e)
    {
        _code = e.Value.ToString();

        if (isBarcode)
        {
            GenerateBarcode();
        }
        else
        {
            GenerateQrCode();
        }
    }

    private void GenerateBarcode()
    {
        Module.InvokeVoidAsync("handleBarcodeChange", _code);
    }

    private void GenerateQrCode()
    {
        QRCodeGenerator generator = new QRCodeGenerator();
        QRCodeData codeData = generator.CreateQrCode(_code, QRCodeGenerator.ECCLevel.Q);
        PngByteQRCode qrCode = new PngByteQRCode(codeData);
        byte[] qrCodeByteArr = qrCode.GetGraphic(20);
        string base64String = Convert.ToBase64String(qrCodeByteArr);
        string source = $"data:image/png;base64,{base64String}";
        Module.InvokeVoidAsync("handleQrCodeChange", source, _code);
    }
}
