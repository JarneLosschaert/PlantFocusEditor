@using System.Text.RegularExpressions

<div class="color-input">
    <input type="text" @bind="_fontColorText" @oninput="HandleColorTextInput" maxlength="7" />
    <input type="color" @bind="fontColor" @oninput="(e) => HandleColorInput(e.Value.ToString())" />
</div>

@code {
    [Parameter]
    public string fontColor { get; set; } = "#000000";

    [Parameter]
    public EventCallback<string> handleColor { get; set; }

    private string _fontColorText = "#000000";

    protected override void OnParametersSet()
    {
        _fontColorText = fontColor;
    }

    private void HandleColorInput(string color)
    {
        if (isColor(color))
        {
            fontColor = color;
            _fontColorText = color;
            handleColor.InvokeAsync(color);
        }
        StateHasChanged();
    }

    private void HandleColorTextInput(ChangeEventArgs e)
    {
        string color = e.Value.ToString();
        _fontColorText = toHexColor(color);
        HandleColorInput(color);
    }

    private string toHexColor(string color)
    {
        color = Regex.Replace(color, "[^A-Fa-f0-9]", "");
        if (!color.StartsWith("#"))
        {
            color = "#" + color;
        }
        return color;
    }

    private bool isColor(string color)
    {
        return Regex.IsMatch(color, "^#([A-Fa-f0-9]{6})$");
    }
}