@inject IJSRuntime JS

<section class="styling-bar">
    <div class="content-header">
        <h2>@(_selectedNode == "" ? "Label" : _selectedNode)</h2>
    </div>
    <div class="content">
        @switch (_selectedNode)
        {
            case "Text":
                <TextStyleContent Module="_textModule" />
                <AppearanceContent Module="_appearanceModule" />
                <ControlContent Module="_controlsModule" />
                break;
            case "Image":
                <ImageStyleContent Module="_imageModule" />
                <AppearanceContent Module="_appearanceModule" />
                <BorderContent Module="_borderModule" />
                <ControlContent Module="_controlsModule" />
                break;
            case "Element":
                <ElementStyleContent Module="_elementModule" />
                <AppearanceContent Module="_appearanceModule" />
                <BorderContent Module="_borderModule" />
                <ControlContent Module="_controlsModule" />
                break;
            case "Barcode":
                <CodeStyleContent Module="_codeModule" isBarcode="true" />
                <AppearanceContent Module="_appearanceModule" />
                <BorderContent Module="_borderModule" />
                <ControlContent Module="_controlsModule" />
                break;
            case "QR code":
                <CodeStyleContent Module="_codeModule" isBarcode="false" />
                <AppearanceContent Module="_appearanceModule" />
                <BorderContent Module="_borderModule" />
                <ControlContent Module="_controlsModule" />
                break;
            case "Properties":
                <TextStyleContent Module="_propertiesModule" />
                <BorderContent Module="_propertiesModule" />
                break;
            case "Selecting":
                <AppearanceContent Module="_appearanceModule" />
                <ControlContent Module="_controlsModule" />
                break;
            default:
                <LabelStyleContent />
                break;
        }
    </div>
</section>

@code {
    private string _selectedNode = "";
    private IJSObjectReference? _module;
    private IJSObjectReference? _textModule;
    private IJSObjectReference? _imageModule;
    private IJSObjectReference? _elementModule;
    private IJSObjectReference? _codeModule;
    private IJSObjectReference? _borderModule;
    private IJSObjectReference? _appearanceModule;
    private IJSObjectReference? _controlsModule;
    private IJSObjectReference? _propertiesModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/styling/stylingBar.js");
            _textModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/styling/textStyling.js");
            _imageModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/styling/imageStyling.js");
            _elementModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/styling/elementStyling.js");
            _codeModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/styling/codeStyling.js");
            _borderModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/styling/borderStyling.js");
            _appearanceModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/styling/appearanceStyling.js");
            _controlsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/styling/control.js");
            _propertiesModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/styling/propertiesStyling.js");
        }
    }

    public async Task SetSelectedItem()
    {
        _selectedNode = await _module.InvokeAsync<string>("getSelectedItemType");
        StateHasChanged();
    }
}
