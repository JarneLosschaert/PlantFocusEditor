@inject IJSRuntime JS

<CascadingValue Value="this">
    <section class="styling-bar">
        <div class="content-header">
            <h2>@_SelectedTab</h2>
        </div>
        <div class="content">
            @switch (_SelectedTab)
            {
                case StylingBarTabs.Label:
                    <LabelStyleContent />
                    break;
                case StylingBarTabs.Text:
                    <TextStyleContent />
                    break;
                case StylingBarTabs.Image:
                    <ImageStyleContent @ref="_imageStyleContent" />
                    break;
                case StylingBarTabs.Element:
                    <ElementStyleContent />
                    break;
            }
        </div>
    </section>
</CascadingValue>

@code {
    private IJSObjectReference? _imageShapeStylingBar;
    private ImageStyleContent _imageStyleContent;
    public StylingBarTabs _SelectedTab { get; set; } = StylingBarTabs.Text;

    public string _popupVisible { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var reference = DotNetObjectReference.Create(this);
            _imageShapeStylingBar = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/imageShapeStylingBar.js");
            _imageShapeStylingBar.InvokeVoidAsync("setImageLayerReference", reference);
            _imageShapeStylingBar.InvokeVoidAsync("setImageShapeStylingBarReference", reference);
        }
    }

    public void togglePopup(string popup)
    {
        Console.WriteLine(popup);
        if (_popupVisible == popup)
        {
            _popupVisible = "";
        }
        else
        {
            _popupVisible = popup;
        }
        StateHasChanged();
    }

    [JSInvokable]
    public void displayImageShapeStylingBar(bool onlyImage, bool onlyShapes)
    {
        //_imageStyleContent.displayImageShapeStylingBar(onlyImage, onlyShapes);
    }
}

