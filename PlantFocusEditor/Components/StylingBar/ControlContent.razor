<article class="control-content">
    <h3>Elements</h3>
    <div>
        <div class="controls">
            @if (_locked)
            {
                <button @onclick="Lock">
                    @((MarkupString)CustomIcons.Locked())
                    Unlock
                </button>
            }
            else
            {
                <button @onclick="Lock">
                    @((MarkupString)CustomIcons.UnLocked())
                    Lock
                </button>
            }
            <button @onclick="Clone">
                @((MarkupString)CustomIcons.Clone())
                Clone
            </button>
            <button @onclick="Delete">
                @((MarkupString)CustomIcons.Trash())
                Delete
            </button>
        </div>
        <div class="position">
            <button class="@(_isPositionPopupVisible ? "selected" : "")" @onclick="TogglePositionPopup">
                @((MarkupString)CustomIcons.Layers())
                Position
            </button>
            @if (_isPositionPopupVisible)
            {
                <div class="position-popup">
                    <ul>
                        <li @onclick="@(() => ChangePosition(true, true))">
                            @((MarkupString)CustomIcons.Front())
                            Bring to front
                        </li>
                        <li @onclick="@(() => ChangePosition(true, false))">
                            @((MarkupString)CustomIcons.Forward())
                            Bring forward
                        </li>
                        <li @onclick="@(() => ChangePosition(false, false))">
                            @((MarkupString)CustomIcons.Backward())
                            Send backward
                        </li>
                        <li @onclick="@(() => ChangePosition(false, true))">
                            @((MarkupString)CustomIcons.Back())
                            Send to back
                        </li>
                    </ul>
                </div>
            }
        </div>
    </div>
</article>

@code {
    [Parameter]
    public IJSObjectReference? Module { get; set; }
    private bool _isPositionPopupVisible = false;
    private bool _locked = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Module != null)
        {
            Dictionary<string, JsonElement> values = await Module.InvokeAsync<Dictionary<string, JsonElement>>("getValues");
            _locked = values["locked"].GetBoolean();
            StateHasChanged();
        }
    }

    private void Lock()
    {
        _locked = !_locked;
        if (Module != null)
        {
            Module.InvokeVoidAsync("lockNode");
        }
    }

    private void Clone()
    {
        if (Module != null)
        {
            Module.InvokeVoidAsync("cloneNode");
        }
    }

    private void Delete()
    {
        if (Module != null)
        {
            Module.InvokeVoidAsync("deleteNodes");
        }
    }

    private void TogglePositionPopup()
    {
        _isPositionPopupVisible = !_isPositionPopupVisible;
    }

    private void ChangePosition(bool forward, bool full)
    {
        if (Module != null)
        {
            Module.InvokeVoidAsync("changePosition", forward, full);
        }
    }
}
